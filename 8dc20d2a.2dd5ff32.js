(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{74:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return s}));var r=t(2),a=t(6),p=(t(0),t(95)),c={id:"generateTypes",title:"Generating TypeScript typings"},o={unversionedId:"generateTypes",id:"generateTypes",isDocsHomePage:!1,title:"Generating TypeScript typings",description:"Installing dependencies",source:"@site/docs/generateTypes.md",slug:"/generateTypes",permalink:"/docs/generateTypes",editUrl:"https://github.com/positiveaction/developer-docs/edit/master/docs/generateTypes.md",version:"current",sidebar:"someSidebar",previous:{title:"Playground",permalink:"/docs/apiGateway"}},i=[{value:"Installing dependencies",id:"installing-dependencies",children:[]},{value:"Codegen.yml file",id:"codegenyml-file",children:[]},{value:"Generate TypesScript typing",id:"generate-typesscript-typing",children:[]}],l={rightToc:i};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(p.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(p.b)("h3",{id:"installing-dependencies"},"Installing dependencies"),Object(p.b)("p",null,"We need to make sure that the basic GraphQL package is within our dependencies, since GraphQL Code Generator depends on it:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"yarn add graphql\n")),Object(p.b)("p",null,"Then we can install GraphQL Code Generator: "),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{}),"yarn add -D @graphql-codegen/cli\n")),Object(p.b)("p",null,"Install the following plugins:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{}),"yarn add -D @graphql-codegen/typescript\n")),Object(p.b)("p",null,"This plugin generates the base TypeScript types, based on your GraphQL schema."),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{}),"yarn add -D @graphql-codegen/typescript-operations\n")),Object(p.b)("p",null,"This plugin generates TypeScript types based on your GraphQLSchema ",Object(p.b)("em",{parentName:"p"},"and")," your GraphQL operations and fragments. It generates types for your GraphQL documents: Query, Mutation, Subscription and Fragment."),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{}),"yarn add -D @graphql-codegen/typescript-document-nodes\n")),Object(p.b)("p",null,"This plugin generates TypeScript source (",Object(p.b)("inlineCode",{parentName:"p"},".ts"),") file from GraphQL files (",Object(p.b)("inlineCode",{parentName:"p"},".graphql"),")."),Object(p.b)("h3",{id:"codegenyml-file"},"Codegen.yml file"),Object(p.b)("p",null,"To pass configuration to GraphQL Codegen, you need to create a  ",Object(p.b)("inlineCode",{parentName:"p"},"codegen.yml")," inside of your project root with the following content:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),'overwrite: true\nschema: "<graphql_endpoint>"\ndocuments: \n  - "src/**/*.graphql"\ngenerates:\n  <generated_path.ts>:\n    plugins:\n      - "typescript"\n      - "typescript-operations"\n      - "typescript-document-nodes"\n')),Object(p.b)("p",null,"Where ",Object(p.b)("inlineCode",{parentName:"p"},"<graphql_endpoint>")," is an URL to your GraphQL endpoint, a local path to ",Object(p.b)("inlineCode",{parentName:"p"},".graphql")," file, a glob pattern to your GraphQL schema files, or a JavaScript file that exports the schema to generate code from. This can also be an array which specifies multiple schemas to generate code from."),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"<generated_path.ts>")," represents an output path for the generated cod, ex of path: ",Object(p.b)("inlineCode",{parentName:"p"},"src/graphql/generated/graphql.ts")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"documents")," is an array of paths or glob patterns for files which export GraphQL documents using a gql tag or a plain string; in our example we are using ",Object(p.b)("inlineCode",{parentName:"p"},"./src/**/*.graphql")," that will get all files with extension ",Object(p.b)("inlineCode",{parentName:"p"},".graphql")),Object(p.b)("h3",{id:"generate-typesscript-typing"},"Generate TypesScript typing"),Object(p.b)("p",null,"Add the following line in your scripts object inside of package.json file:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{}),'"gqlgen:development": "graphql-codegen --config codegen.yml"\n')),Object(p.b)("p",null,"To generate simply call:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{}),"./yarn gqlgen:development\n")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"./yarn")," is calling the yarn inside of the container. If you don't have the file and wish to create it then follow the instructions below"),Object(p.b)("p",null,"Create ",Object(p.b)("inlineCode",{parentName:"p"},"yarn")," file"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"touch yarn\n")),Object(p.b)("p",null,"Make it executable"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"chmod +x yarn\n")),Object(p.b)("p",null,"Add the following code inside of the file and replace the ",Object(p.b)("inlineCode",{parentName:"p"},"<NAME>")," with the container name:"),Object(p.b)("pre",null,Object(p.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"#!/usr/bin/env bash\ndocker-compose exec <NAME> yarn $@\n\n")))}s.isMDXComponent=!0},95:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return g}));var r=t(0),a=t.n(r);function p(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){p(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),s=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},b=function(e){var n=s(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,p=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),b=s(t),u=r,g=b["".concat(c,".").concat(u)]||b[u]||d[u]||p;return t?a.a.createElement(g,o(o({ref:n},l),{},{components:t})):a.a.createElement(g,o({ref:n},l))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var p=t.length,c=new Array(p);c[0]=u;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var l=2;l<p;l++)c[l]=t[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);